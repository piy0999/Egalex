{
  "_args": [
    [
      {
        "raw": "abstract-leveldown@~2.7.1",
        "scope": null,
        "escapedName": "abstract-leveldown",
        "name": "abstract-leveldown",
        "rawSpec": "~2.7.1",
        "spec": ">=2.7.1 <2.8.0",
        "type": "range"
      },
      "/Users/wali/Desktop/Dev/ethereumdev/Egalex/node_modules/memdown"
    ]
  ],
  "_from": "abstract-leveldown@>=2.7.1 <2.8.0",
  "_id": "abstract-leveldown@2.7.2",
  "_inCache": true,
  "_location": "/memdown/abstract-leveldown",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/abstract-leveldown-2.7.2.tgz_1507681550154_0.1986429109238088"
  },
  "_npmUser": {
    "name": "ralphtheninja",
    "email": "ralphtheninja@riseup.net"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "abstract-leveldown@~2.7.1",
    "scope": null,
    "escapedName": "abstract-leveldown",
    "name": "abstract-leveldown",
    "rawSpec": "~2.7.1",
    "spec": ">=2.7.1 <2.8.0",
    "type": "range"
  },
  "_requiredBy": [
    "/memdown"
  ],
  "_resolved": "https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-2.7.2.tgz",
  "_shasum": "87a44d7ebebc341d59665204834c8b7e0932cc93",
  "_shrinkwrap": null,
  "_spec": "abstract-leveldown@~2.7.1",
  "_where": "/Users/wali/Desktop/Dev/ethereumdev/Egalex/node_modules/memdown",
  "browser": {
    "rimraf": false
  },
  "bugs": {
    "url": "https://github.com/level/abstract-leveldown/issues"
  },
  "contributors": [
    {
      "name": "Rod Vagg",
      "email": "r@va.gg",
      "url": "https://github.com/rvagg"
    },
    {
      "name": "John Chesley",
      "email": "john@chesl.es",
      "url": "https://github.com/chesles/"
    },
    {
      "name": "Jake Verbaten",
      "email": "raynos2@gmail.com",
      "url": "https://github.com/raynos"
    },
    {
      "name": "Dominic Tarr",
      "email": "dominic.tarr@gmail.com",
      "url": "https://github.com/dominictarr"
    },
    {
      "name": "Max Ogden",
      "email": "max@maxogden.com",
      "url": "https://github.com/maxogden"
    },
    {
      "name": "Lars-Magnus Skog",
      "email": "ralphtheninja@riseup.net",
      "url": "https://github.com/ralphtheninja"
    },
    {
      "name": "David BjÃ¶rklund",
      "email": "david.bjorklund@gmail.com",
      "url": "https://github.com/kesla"
    },
    {
      "name": "Julian Gruber",
      "email": "julian@juliangruber.com",
      "url": "https://github.com/juliangruber"
    },
    {
      "name": "Paolo Fragomeni",
      "email": "paolo@async.ly",
      "url": "https://github.com/hij1nx"
    },
    {
      "name": "Anton Whalley",
      "email": "anton.whalley@nearform.com",
      "url": "https://github.com/No9"
    },
    {
      "name": "Matteo Collina",
      "email": "matteo.collina@gmail.com",
      "url": "https://github.com/mcollina"
    },
    {
      "name": "Pedro Teixeira",
      "email": "pedro.teixeira@gmail.com",
      "url": "https://github.com/pgte"
    },
    {
      "name": "James Halliday",
      "email": "mail@substack.net",
      "url": "https://github.com/substack"
    },
    {
      "name": "Thomas Watson Steen",
      "email": "w@tson.dk",
      "url": "https://github.com/watson"
    }
  ],
  "dependencies": {
    "xtend": "~4.0.0"
  },
  "description": "An abstract prototype matching the LevelDOWN API",
  "devDependencies": {
    "rimraf": "^2.6.1",
    "sinon": "^4.0.0",
    "tape": "^4.7.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-+OVvxH2rHVEhWLdbudP6p0+dNMXu8JA1CbhP19T8paTYAcX7oJ4OVjT+ZUVpv7mITxXHqDMej+GdqXBmXkw09w==",
    "shasum": "87a44d7ebebc341d59665204834c8b7e0932cc93",
    "tarball": "https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-2.7.2.tgz"
  },
  "gitHead": "871f679b5504ffcdff4c6560d45855e7045c7362",
  "homepage": "https://github.com/level/abstract-leveldown",
  "keywords": [
    "leveldb",
    "leveldown",
    "levelup"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "juliangruber",
      "email": "julian@juliangruber.com"
    },
    {
      "name": "ralphtheninja",
      "email": "ralphtheninja@riseup.net"
    },
    {
      "name": "rvagg",
      "email": "r@va.gg"
    }
  ],
  "name": "abstract-leveldown",
  "optionalDependencies": {},
  "readme": "# abstract-leveldown\n\n> An abstract prototype matching the [`leveldown`](https://github.com/level/leveldown/) API. Useful for extending [`levelup`](https://github.com/level/levelup) functionality by providing a replacement to `leveldown`.\n\n[![level badge][level-badge]](https://github.com/level/awesome)\n[![npm](https://img.shields.io/npm/v/abstract-leveldown.svg)](https://www.npmjs.com/package/abstract-leveldown)\n[![Travis](https://travis-ci.org/Level/abstract-leveldown.svg?branch=master)](http://travis-ci.org/Level/abstract-leveldown)\n[![david](https://david-dm.org/Level/abstract-leveldown.svg)](https://david-dm.org/level/abstract-leveldown)\n[![npm](https://img.shields.io/npm/dm/abstract-leveldown.svg)](https://www.npmjs.com/package/abstract-leveldown)\n\n`abstract-leveldown` provides a simple, operational *noop* base prototype that's ready for extending. By default, all operations have sensible \"noops\" (operations that essentially do nothing). For example, simple operations such as `.open(callback)` and `.close(callback)` will simply invoke the callback (on a *next tick*). More complex operations  perform sensible actions, for example: `.get(key, callback)` will always return a `'NotFound'` `Error` on the callback.\n\nYou add functionality by implementing the underscore versions of the operations. For example, to implement a `put()` operation you add a `_put()` method to your object. Each of these underscore methods override the default *noop* operations and are always provided with **consistent arguments**, regardless of what is passed in by the client.\n\nAdditionally, all methods provide argument checking and sensible defaults for optional arguments. All bad-argument errors are compatible with `leveldown` (they pass the `leveldown` method arguments tests). For example, if you call `.open()` without a callback argument you'll get an `Error('open() requires a callback argument')`. Where optional arguments are involved, your underscore methods will receive sensible defaults. A `.get(key, callback)` will pass through to a `._get(key, options, callback)` where the `options` argument is an empty object.\n\n## Example\n\nA simplistic in-memory `leveldown` replacement\n\n```js\nvar util = require('util')\nvar AbstractLevelDOWN = require('./').AbstractLevelDOWN\n\n// constructor, passes through the 'location' argument to the AbstractLevelDOWN constructor\nfunction FakeLevelDOWN (location) {\n  AbstractLevelDOWN.call(this, location)\n}\n\n// our new prototype inherits from AbstractLevelDOWN\nutil.inherits(FakeLevelDOWN, AbstractLevelDOWN)\n\n// implement some methods\n\nFakeLevelDOWN.prototype._open = function (options, callback) {\n  // initialise a memory storage object\n  this._store = {}\n  // optional use of nextTick to be a nice async citizen\n  process.nextTick(function () { callback(null, this) }.bind(this))\n}\n\nFakeLevelDOWN.prototype._put = function (key, value, options, callback) {\n  key = '_' + key // safety, to avoid key='__proto__'-type skullduggery\n  this._store[key] = value\n  process.nextTick(callback)\n}\n\nFakeLevelDOWN.prototype._get = function (key, options, callback) {\n  var value = this._store['_' + key]\n  if (value === undefined) {\n    // 'NotFound' error, consistent with LevelDOWN API\n    return process.nextTick(function () { callback(new Error('NotFound')) })\n  }\n  process.nextTick(function () {\n    callback(null, value)\n  })\n}\n\nFakeLevelDOWN.prototype._del = function (key, options, callback) {\n  delete this._store['_' + key]\n  process.nextTick(callback)\n}\n\n// Now use it with levelup\n\nvar levelup = require('levelup')\n\nvar db = levelup(new FakeLevelDOWN('/who/cares'))\n\ndb.put('foo', 'bar', function (err) {\n  if (err) throw err\n  db.get('foo', function (err, value) {\n    if (err) throw err\n    console.log('Got foo =', value)\n  })\n})\n```\n\nSee [`memdown`](https://github.com/Level/memdown/) if you are looking for a complete in-memory replacement for `leveldown`.\n\n## Extensible API\n\nRemember that each of these methods, if you implement them, will receive exactly the number and order of arguments described. Optional arguments will be converted to sensible defaults.\n\n### AbstractLevelDOWN(location)\n### AbstractLevelDOWN#status\n\nAn `AbstractLevelDOWN` based database can be in one of the following states:\n\n* `'new'` - newly created, not opened or closed\n* `'opening'` - waiting for the database to be opened\n* `'open'` - successfully opened the database, available for use\n* `'closing'` - waiting for the database to be closed\n* `'closed'` - database has been successfully closed, should not be used\n\n### AbstractLevelDOWN#_open(options, callback)\n### AbstractLevelDOWN#_close(callback)\n### AbstractLevelDOWN#_get(key, options, callback)\n### AbstractLevelDOWN#_put(key, value, options, callback)\n### AbstractLevelDOWN#_del(key, options, callback)\n### AbstractLevelDOWN#_batch(array, options, callback)\n\nIf `batch()` is called without arguments or with only an options object then it should return a `Batch` object with chainable methods. Otherwise it will invoke a classic batch operation.\n\n### AbstractLevelDOWN#_chainedBatch()\n\nBy default a `batch()` operation without arguments returns a blank `AbstractChainedBatch` object. The prototype is available on the main exports for you to extend. If you want to implement chainable batch operations then you should extend the `AbstractChaindBatch` and return your object in the `_chainedBatch()` method.\n\n### AbstractLevelDOWN#_approximateSize(start, end, callback)\n### AbstractLevelDOWN#_serializeKey(key)\n### AbstractLevelDOWN#_serializeValue(value)\n### AbstractLevelDOWN#_iterator(options)\n\nBy default an `iterator()` operation returns a blank `AbstractIterator` object. The prototype is available on the main exports for you to extend. If you want to implement iterator operations then you should extend the `AbstractIterator` and return your object in the `_iterator(options)` method.\n\n`AbstractIterator` implements the basic state management found in LevelDOWN. It keeps track of when a `next()` is in progress and when an `end()` has been called so it doesn't allow concurrent `next()` calls, it does allow `end()` while a `next()` is in progress and it doesn't allow either `next()` or `end()` after `end()` has been called.\n\n### AbstractIterator(db)\n\nProvided with the current instance of `AbstractLevelDOWN` by default.\n\n### AbstractIterator#_next(callback)\n### AbstractIterator#_end(callback)\n\n### AbstractChainedBatch\nProvided with the current instance of `AbstractLevelDOWN` by default.\n\n### AbstractChainedBatch#_put(key, value)\n### AbstractChainedBatch#_del(key)\n### AbstractChainedBatch#_clear()\n### AbstractChainedBatch#_write(options, callback)\n### AbstractChainedBatch#_serializeKey(key)\n### AbstractChainedBatch#_serializeValue(value)\n\n### isLevelDown(db)\n\nReturns `true` if `db` has the same public api as `abstract-leveldown`, otherwise `false`. This is a utility function and it's not part of the extensible api.\n\n<a name=\"contributing\"></a>\nContributing\n------------\n\n`abstract-leveldown` is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [contribution guide](https://github.com/Level/community/blob/master/CONTRIBUTING.md) for more details.\n\n<a name=\"license\"></a>\nLicense &amp; Copyright\n-------------------\n\nCopyright &copy; 2013-2017 `abstract-leveldown` [contributors](https://github.com/level/community#contributors).\n\n`abstract-leveldown` is licensed under the MIT license. All rights not explicitly granted in the MIT license are reserved. See the included `LICENSE.md` file for more details.\n\n[level-badge]: http://leveldb.org/img/badge.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/level/abstract-leveldown.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "typings": "index.d.ts",
  "version": "2.7.2"
}
