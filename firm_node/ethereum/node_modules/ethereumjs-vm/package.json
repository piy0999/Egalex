{
  "_args": [
    [
      {
        "raw": "ethereumjs-vm@^2.0.2",
        "scope": null,
        "escapedName": "ethereumjs-vm",
        "name": "ethereumjs-vm",
        "rawSpec": "^2.0.2",
        "spec": ">=2.0.2 <3.0.0",
        "type": "range"
      },
      "/Users/wali/Desktop/Dev/ethereumdev/Egalex/node_modules/web3-provider-engine"
    ]
  ],
  "_from": "ethereumjs-vm@>=2.0.2 <3.0.0",
  "_id": "ethereumjs-vm@2.3.3",
  "_inCache": true,
  "_location": "/ethereumjs-vm",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ethereumjs-vm-2.3.3.tgz_1517566959019_0.7265667030587792"
  },
  "_npmUser": {
    "name": "holgerd77",
    "email": "Holger.Drewes@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "bn.js": "4.11.8",
    "create-hash": "1.1.3",
    "ethjs-util": "0.1.4",
    "keccak": "1.4.0",
    "rlp": "2.0.0",
    "safe-buffer": "5.1.1",
    "secp256k1": "3.5.0"
  },
  "_requested": {
    "raw": "ethereumjs-vm@^2.0.2",
    "scope": null,
    "escapedName": "ethereumjs-vm",
    "name": "ethereumjs-vm",
    "rawSpec": "^2.0.2",
    "spec": ">=2.0.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/web3-provider-engine"
  ],
  "_resolved": "https://registry.npmjs.org/ethereumjs-vm/-/ethereumjs-vm-2.3.3.tgz",
  "_shasum": "05719139e0c4a59e829022964a6048b17d2d84b0",
  "_shrinkwrap": null,
  "_spec": "ethereumjs-vm@^2.0.2",
  "_where": "/Users/wali/Desktop/Dev/ethereumdev/Egalex/node_modules/web3-provider-engine",
  "author": {
    "name": "mjbecze",
    "email": "mjbecze@gmail.com"
  },
  "browserify": {
    "transform": [
      [
        "babelify",
        {
          "presets": [
            "es2015"
          ]
        }
      ]
    ]
  },
  "bugs": {
    "url": "https://github.com/ethereumjs/ethereumjs-vm/issues"
  },
  "contributors": [
    {
      "name": "Alex Beregszaszi",
      "email": "alex@rtfs.hu"
    }
  ],
  "dependencies": {
    "async": "^2.1.2",
    "async-eventemitter": "^0.2.2",
    "ethereum-common": "0.2.0",
    "ethereumjs-account": "^2.0.3",
    "ethereumjs-block": "~1.7.0",
    "ethereumjs-util": "^5.1.3",
    "fake-merkle-patricia-tree": "^1.0.1",
    "functional-red-black-tree": "^1.0.1",
    "merkle-patricia-tree": "^2.1.2",
    "rustbn.js": "~0.1.1",
    "safe-buffer": "^5.1.1"
  },
  "description": "an ethereum VM implementation",
  "devDependencies": {
    "babel-preset-es2015": "^6.24.0",
    "babelify": "^7.3.0",
    "ethereumjs-blockchain": "~2.1.0",
    "ethereumjs-testing": "git+https://github.com/ethereumjs/ethereumjs-testing.git",
    "ethereumjs-tx": "1.3.3",
    "level": "^1.4.0",
    "leveldown": "^1.4.6",
    "levelup": "^1.3.2",
    "memdown": "^1.1.0",
    "minimist": "^1.1.1",
    "standard": "^10.0.0",
    "tape": "4.6.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-yIWJqTEcrF9vJTCvNMxacRkAx6zIZTOW0SmSA+hSFiU1x8JyVZDi9o5udwsRVECT5RkPgQzm62kpL6Pf4qemsw==",
    "shasum": "05719139e0c4a59e829022964a6048b17d2d84b0",
    "tarball": "https://registry.npmjs.org/ethereumjs-vm/-/ethereumjs-vm-2.3.3.tgz"
  },
  "gitHead": "78af4172a2ce72f605801494badda0e5b750cd09",
  "homepage": "https://github.com/ethereumjs/ethereumjs-vm",
  "keywords": [
    "ethereum",
    "VM"
  ],
  "license": "MPL-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jwasinger",
      "email": "j-wasinger@hotmail.com"
    },
    {
      "name": "holgerd77",
      "email": "Holger.Drewes@gmail.com"
    },
    {
      "name": "null_radix",
      "email": "null_radix@riseup.net"
    }
  ],
  "name": "ethereumjs-vm",
  "optionalDependencies": {},
  "readme": "# SYNOPSIS\n\n[![NPM Package](https://img.shields.io/npm/v/ethereumjs-vm.svg?style=flat-square)](https://www.npmjs.org/package/ethereumjs-vm)\n[![Build Status](https://img.shields.io/travis/ethereumjs/ethereumjs-vm.svg?branch=master&style=flat-square)](https://travis-ci.org/ethereumjs/ethereumjs-vm)\n[![Gitter](https://img.shields.io/gitter/room/ethereum/ethereumjs-lib.svg?style=flat-square)](https://gitter.im/ethereum/ethereumjs-lib) or #ethereumjs on freenode\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\nImplements Ethereum's VM in Javascript.\n\n#### Fork Support\n\nThis library always only supports the currently active Ethereum mainnet fork rules with its latest release, old fork rules are dropped with new releases once a HF occured.\n\nThe current major [2.3.x](https://github.com/ethereumjs/ethereumjs-vm/releases) release series supports the  [Byzantium](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-609.md) fork changes. For a [Spurious Dragon](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-607.md) compatible version of this library install the latest of the ``2.2.x`` series (see [Changelog](./CHANGELOG.md)).\n\n# INSTALL\n`npm install ethereumjs-vm`\n\n# USAGE\n```javascript\nvar VM = require('ethereumjs-vm')\n\n//create a new VM instance\nvar vm = new VM()\nvar code = '7f4e616d65526567000000000000000000000000000000000000000000000000003055307f4e616d6552656700000000000000000000000000000000000000000000000000557f436f6e666967000000000000000000000000000000000000000000000000000073661005d2720d855f1d9976f88bb10c1a3398c77f5573661005d2720d855f1d9976f88bb10c1a3398c77f7f436f6e6669670000000000000000000000000000000000000000000000000000553360455560df806100c56000396000f3007f726567697374657200000000000000000000000000000000000000000000000060003514156053576020355415603257005b335415603e5760003354555b6020353360006000a233602035556020353355005b60007f756e72656769737465720000000000000000000000000000000000000000000060003514156082575033545b1560995733335460006000a2600033545560003355005b60007f6b696c6c00000000000000000000000000000000000000000000000000000000600035141560cb575060455433145b1560d25733ff5b6000355460005260206000f3'\n\nvm.runCode({\n  code: Buffer.from(code, 'hex'), // code needs to be a Buffer\n  gasLimit: Buffer.from('ffffffff', 'hex')\n}, function(err, results){\n  console.log('returned: ' + results.return.toString('hex'));\n})\n```\nAlso more examples can be found here\n- [examples](./examples)\n- [old blog post](https://wanderer.github.io/ethereum/nodejs/code/2014/08/12/running-contracts-with-vm/)\n\n# BROWSER\n\nTo build for standalone use in the browser, install `browserify` and check [run-transactions-simple example](https://github.com/ethereumjs/ethereumjs-vm/tree/master/examples/run-transactions-simple). This will give you a global variable `EthVM` to use. The generated file will be at `./examples/run-transactions-simple/build.js`.\n\n# API\n  - [`new VM([opts])`](#new-vmstatetrie-blockchain)\n  - [`VM` methods](#vm-methods)\n    - [`vm.runBlockchain([blockchain], [cb])`](#vmrunblockchainblockchain-cb)\n    - [`vm.runBlock(opts, cb)`](#vmrunblockopts-cb)\n    - [`vm.runTx(opts, cb)`](#vmruntxopts-cb)\n    - [`vm.runCode(opts, cb)`](#vmruncodeopts-cb)\n    - [`vm.generateCanonicalGenesis(cb)`](#vmgeneratecanonicalgenesiscb)\n    - [`vm.generateGenesis(cb)`](#vmgenerategenesiscb)\n  - [`VM` debugging hooks](#vm-debugging-hooks)\n    - [`vm.onStep`](#vmonstep)\n\n### `new VM([StateTrie], [blockchain])`\nCreates a new VM object\n- `StateTrie` - The [Patricia Merkle Tree](https://github.com/wanderer/merkle-patricia-tree) that contains the state. If no trie is given the `VM` will create an in memory trie.\n- `blockchain` - an instance of the [`Blockchain`](https://github.com/ethereum/ethereumjs-lib/blob/master/docs/blockchain.md). If no blockchain is given a fake blockchain will be used.\n- `opts`\n  - `state` - the state trie\n  - `blockchain` - an instance of ethereumjs-blockchain\n  - `activatePrecompiles` - create entries in the state tree for the precompiled contracts\n\n### `VM` methods\n\n\n#### `vm.runBlockchain(blockchain, cb)`\nProcess blocks and adds them to the blockchain.\n- `blockchain` - A [blockchain](https://github.com/ethereum/ethereumjs-blockchain) that to process\n- `cb` - The callback. It is given an err parameter if it fails\n\n--------------------------------------------------------\n\n#### `vm.runBlock(opts, cb)`\nProcesses the `block` running all of the transactions it contains and updating the miner's account.\n- `opts.block` - The [`Block`](https://github.com/ethereumjs/ethereumjs-block) to process\n- `opts.generate` - a `Boolean`; whether to generate the stateRoot. If false  `runBlock` will check the stateRoot of the block against the Trie\n- `cb` - The callback. It is given two arguments, an `error` string containing an error that may have happened or `null`, and a `results` object with the following properties:\n  - `receipts` - the receipts from the transactions in the block\n  - `results` - an Array for results from the transactions in the block\n--------------------------------------------------------\n\n\n#### `vm.runTx(opts, cb)`\nProcess a transaction.\n- `opts.tx` - A [`Transaction`](https://github.com/ethereum/ethereumjs-tx) to run.\n- `opts.block` - The block to which the `tx` belongs. If omitted a blank block will be used.\n- `cb` - The callback. It is given two arguments, an `error` string containing an error that may have happened or `null`, and a `results` object with the following properties:\n  - `amountSpent` - the amount of ether used by this transaction as a `bignum`\n  - `gasUsed` - the amount of gas used by the transaction\n  - `vm` - contains the results from running the code, if any, as described in [`vm.runCode(params, cb)`](#vmruncodeopts-cb)\n\n--------------------------------------------------------\n\n#### `vm.runCode(opts, cb)`\nRuns EVM code\n- `opts.code` - The EVM code to run given as a `Buffer`\n- `opts.data` - The input data given as a `Buffer`\n- `opts.value` - The value in ether that is being sent to `opt.address`. Defaults to `0`\n- `opts.block` - The [`Block`](https://github.com/ethereumjs/ethereumjs-block) the `tx` belongs to. If omitted a blank block will be used.\n- `opts.gasLimit` - The gas limit for the code given as a `Buffer`\n- `opts.account` - The [`Account`](https://github.com/ethereumjs/ethereumjs-account) that the executing code belongs to. If omitted an empty account will be used\n- `opts.address` - The address of the account that is executing this code. The address should be a `Buffer` of bytes. Defaults to `0`\n- `opts.origin` - The address where the call originated from. The address should be a `Buffer` of 20bits. Defaults to `0`\n- `opts.caller` - The address that ran this code. The address should be a `Buffer` of 20bits. Defaults to `0`\n- `cb` - The callback. It is given two arguments, an `error` string containing an error that may have happened or `null` and a `results` object with the following properties\n  - `gas` - the amount of gas left as a `bignum`\n  - `gasUsed` - the amount of gas as a `bignum` the code used to run.\n  - `gasRefund` - a `Bignum` containing the amount of gas to refund from deleting storage values\n  - `selfdestruct` - an `Object` with keys for accounts that have selfdestructed and values for balance transfer recipient accounts.\n  - `logs` - an `Array` of logs that the contract emitted.\n  - `exception` - `0` if the contract encountered an exception, `1` otherwise.\n  - `exceptionError` - a `String` describing the exception if there was one.\n  - `return` - a `Buffer` containing the value that was returned by the contract\n\n\n--------------------------------------------------------\n\n#### `vm.stateManager.generateCanonicalGenesis(cb)`\nGenerates the Canonical genesis state.\n\n--------------------------------------------------------\n\n#### `vm.stateManager.generateGenesis(genesisData, cb)`\nGenerate the genesis state.\n- `genesisData` - an `Object` whose keys are addresses and values are `string`s representing initial allocation of ether.\n- `cb` - The callback\n\n```javascript\nvar genesisData = {\n  \"51ba59315b3a95761d0863b05ccc7a7f54703d99\": \"1606938044258990275541962092341162602522202993782792835301376\",\n  \"e4157b34ea9615cfbde6b4fda419828124b70c78\": \"1606938044258990275541962092341162602522202993782792835301376\"\n}\n\nvm.generateGenesis(genesisData, function(){\n  console.log('generation done');\n})\n```\n\n### `events`\nAll events are instances of [async-eventemmiter](https://www.npmjs.com/package/async-eventemitter). If an event handler has an arity of 2 the VM will pause until the callback is called\n\n#### `step`\nThe `step` event is given an `Object` and callback. The `Object` has the following properties.\n- `pc` - a `Number` representing the program counter\n- `opcode` - the next opcode to be ran\n- `gasLeft` - a `bignum` standing for the amount of gasLeft\n- `stack` - an `Array` of `Buffers` containing the stack.\n- `storageTrie` - the storage [trie](https://github.com/wanderer/merkle-patricia-tree) for the account\n- `account` - the [`Account`](https://github.com/ethereum/ethereumjs-account) which owns the code running.\n- `address` - the address of the `account`\n- `depth` - the current number of calls deep the contract is\n- `memory` - the memory of the VM as a `buffer`\n- `cache` - The account cache. Contains all the accounts loaded from the trie. It is an instance of [functional red black tree](https://www.npmjs.com/package/functional-red-black-tree)\n\n#### `beforeBlock`\nEmits the block that is about to be processed.\n\n#### `afterBlock`\nEmits the results of the processing a block.\n\n#### `beforeTx`\nEmits the Transaction that is about to be processed.\n\n#### `afterTx`\nEmits the result of the transaction.\n\n\n# Internal Structure\nThe VM processes state changes at many levels.\n\n* runBlockchain\n  * for every block, runBlock\n* runBlock\n  * for every tx, runTx\n  * pay miner and uncles\n* runTx\n  * check sender balance\n  * check sender nonce\n  * runCall\n  * transfer gas charges\n* runCall\n  * checkpoint state\n  * transfer value\n  * load code\n  * runCode\n  * materialize created contracts\n  * revert or commit checkpoint\n* runCode\n  * iterate over code\n  * run op codes\n  * track gas usage\n* OpFns\n  * run individual op code\n  * modify stack\n  * modify memory\n  * calculate fee\n\nThe opFns for `CREATE`, `CALL`, and `CALLCODE` call back up to `runCall`.\n\n\n# TESTING\n\n### Running Tests\n\nTests can be found in the ``tests`` directory, with ``FORK_CONFIG`` set in ``tests/tester.js``. There are test runners for [State tests](http://www.ethdocs.org/en/latest/contracts-and-transactions/ethereum-tests/state_tests/index.html) and [Blockchain tests](http://www.ethdocs.org/en/latest/contracts-and-transactions/ethereum-tests/blockchain_tests/index.html). VM tests are disabled since Frontier gas costs are not supported any more. Tests are then executed by the [ethereumjs-testing](https://github.com/ethereumjs/ethereumjs-testing) utility library using the official client-independent [Ethereum tests](https://github.com/ethereum/tests).\n\nFor a wider picture about how to use tests to implement EIPs you can have a look at this [reddit post](https://www.reddit.com/r/ethereum/comments/6kc5g3/ethereumjs_team_is_seeking_contributors/)\nor the associated YouTube video introduction to [core development with Ethereumjs-vm](https://www.youtube.com/watch?v=L0BVDl6HZzk&feature=youtu.be).\n\n#### Running different Test Types\n\nRunning all the tests:\n\n`npm test`\n\nRunning the State tests:\n\n`node ./tests/tester -s`\n\nRunning the Blockchain tests:\n\n`node ./tests/tester -b`\n\nState tests run significantly faster than Blockchain tests, so it is often a good choice to start fixing State tests.\n\n#### Running Specific Tests\n\nRunning all the blockchain tests in a file:\n\n`node ./tests/tester -b --file='randomStatetest303'`\n\nRunning tests from a specific directory:\n\n`node ./tests/tester -b --dir='bcBlockGasLimitTest'`\n\nRunning a specific state test case:\n\n`node ./tests/tester -s --test='stackOverflow'`\n\nOnly run test cases with selected ``data``, ``gas`` and/or ``value`` values (see \n[attribute description](http://ethereum-tests.readthedocs.io/en/latest/test_types/state_tests.html) in \ntest docs), provided by the index of the array element in the test ``transaction`` section:\n\n`node tests/tester -s --test='CreateCollisionToEmpty' --data=0 --gas=1 --value=0`\n\nRun a state test from a specified source file not under the ``tests`` directory:\n`node ./tests/tester -s --customStateTest='{path_to_file}'`\n\n#### Skipping Tests\n\nThere are three types of skip lists (``BROKEN``, ``PERMANENT`` and ``SLOW``) which\ncan be found in ``tests/tester.js``. By default tests from all skip lists are omitted.\n\nYou can change this behaviour with:\n\n`node tests/tester -s --skip=BROKEN,PERMANENT`\n\nto skip only the ``BROKEN`` and ``PERMANENT`` tests and include the ``SLOW`` tests.\nThere are also the keywords ``NONE`` or ``ALL`` for convenience.\n\nIt is also possible to only run the tests from the skip lists:\n\n`node tests/tester -s --runSkipped=SLOW`\n\n### Debugging\n\n#### Local Debugging\n\nFor state tests you can use the ``--jsontrace`` flag to output opcode trace information.\n\nBlockchain tests support `--debug` to verify the postState:\n\n`node ./tests/tester -b  --debug --test='ZeroValue_SELFDESTRUCT_ToOneStorageKey_OOGRevert_d0g0v0_EIP158'`\n\nAll/most State tests are replicated as Blockchain tests in a ``GeneralStateTests`` [sub directory](https://github.com/ethereum/tests/tree/develop/BlockchainTests/GeneralStateTests) in the Ethereum tests repo, so for debugging single test cases the Blockchain test version of the State test can be used.\n\n#### Debugging Tools\n\nFor comparing ``EVM`` traces [here](https://gist.github.com/cdetrio/41172f374ae32047a6c9e97fa9d09ad0) are some instructions for setting up ``pyethereum`` to generate corresponding traces for state tests.\n\nCompare TAP output from blockchain/state tests and produces concise diff of the differences between them (example):\n\n```\ncurl https://gist.githubusercontent.com/jwasinger/6cef66711b5e0787667ceb3db6bea0dc/raw/0740f03b4ce90d0955d5aba1e0c30ce698c7145a/gistfile1.txt > output-wip-byzantium.txt\ncurl https://gist.githubusercontent.com/jwasinger/e7004e82426ff0a7137a88d273f11819/raw/66fbd58722747ebe4f7006cee59bbe22461df8eb/gistfile1.txt > output-master.txt\npython utils/diffTestOutput.py output-wip-byzantium.txt output-master.txt\n```\n\nAn extremely rich and powerful toolbox is the [evmlab](https://github.com/holiman/evmlab) from ``holiman``, both for debugging and creating new test cases or example data.\n\n\n# LICENSE\n[MPL-2.0](https://www.mozilla.org/MPL/2.0/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereumjs/ethereumjs-vm.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "node ./tests/tester -a",
    "testBlockchain": "node --stack-size=1500 ./tests/tester -b --excludeDir='GeneralStateTests'",
    "testBlockchainBlockGasLimit": "node --stack-size=1500 ./tests/tester -b --dir='bcBlockGasLimitTest'",
    "testBlockchainGeneralStateTests": "node --stack-size=1500 ./tests/tester -b --dir='GeneralStateTests'",
    "testBlockchainTotalDifficulty": "node --stack-size=1500 ./tests/tester -b --dir='bcTotalDifficultyTest'",
    "testBlockchainValid": "node --stack-size=1500 ./tests/tester -b --dir='bcValidBlockTest'",
    "testState": "node ./tests/tester -s",
    "testVM": "node ./tests/tester -v"
  },
  "standard": {
    "ignore": [
      "dist/**",
      "examples/runcode-browserify.js"
    ]
  },
  "version": "2.3.3"
}
